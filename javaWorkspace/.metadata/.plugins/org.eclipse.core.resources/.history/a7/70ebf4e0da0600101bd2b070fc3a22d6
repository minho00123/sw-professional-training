package com.bank010;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Queue;
import java.util.Random;
import java.util.Scanner;

public class Bank2 {
	private static List<Account> data = new ArrayList<Account>();

	public static int checkAccountNumber(String accountNumber) {
		for (int i = 0; i < data.size(); i++) {
			if (data.get(i).getAccountNumber().equals(accountNumber)) {
				return i;
			}
		}

		return -1;
	}

	public static void checkPassword(String password) {

	}

	public static void main(String[] args) {
		System.out.println("췰가이 은행 ver. 0.1.0");
		Scanner sc = new Scanner(System.in);
		List<Account> data = new ArrayList<Account>();

		while (true) {
			System.out.print("1.계좌 개설 2.잔액 확인 3.입금 4.출금 0.종료> ");
			String userInput = sc.nextLine();

			if (userInput.equals("0")) {
				System.out.println("이용해주셔서 감사합니다.");
				sc.close();
				return;
			} else if (userInput.equals("1")) {
				StringBuffer accountNumber = new StringBuffer();
				Random randomNumberGenerator = new Random();

				for (int i = 0; i < 13; i++) {
					int number = randomNumberGenerator.nextInt(10);

					if (i == 0 && number == 0) {
						i--;
					} else {
						accountNumber.append(number);
					}
				}

				System.out.print("비밀번호 4자리를 입력해주세요> ");
				String password = sc.nextLine();
				while (true) {
					System.out.print("비밀번호 확인> ");
					if (password.equals(sc.nextLine())) {
						System.out.println("계좌번호: " + accountNumber.toString() + " 가 생성되었습니다.");
						Account account = new Account(accountNumber.toString(), password);
						data.add(account);
						break;
					} else {
						System.out.println("비밀번호가 맞지 않습니다. 다시 입력해주세요.");
					}
				}
			} else if (userInput.equals("2")) {
				System.out.print("계좌번호> ");
				String accountNumber = sc.nextLine();
				int selectedIndex = checkAccountNumber(accountNumber);

				if (selectedIndex == -1) {
					System.out.println("계좌가 존재하지 않습니다.");
				} else {
					System.out.print("비밀번호> ");
					String password = sc.nextLine();

					checkPassword(password);
				}

				if (hasAccount) {

					if (data.get(selectedIndex).getPassword().equals(password)) {
						long balance = data.get(selectedIndex).getBalance();

						System.out.println("잔액: " + balance + "원");

						Queue<long[]> records = data.get(selectedIndex).getRecords();
						while (!records.isEmpty()) {
							long[] record = records.element();
							String type = "";

							if (record[0] == 1) {
								type = "입금";
							} else if (record[0] == 2) {
								type = "출금";
							}

							long amount = record[1];
							long time = record[2];
							SimpleDateFormat formattedTime = new SimpleDateFormat("yyyy.MM.dd 'at' HH:mm:ss z");
							String printTime = formattedTime.format(time);

							System.out.println(type + "\t" + amount + "원\t" + printTime);
							records.remove();
						}
					} else {
						System.out.println("비밀번호가 맞지 않습니다.");
					}
				} else {
					System.out.println("계좌가 존재하지 않습니다.");
				}
			} else if (userInput.equals("3")) {
				System.out.print("계좌번호> ");
				String accountNumber = sc.nextLine();
				int selectedIndex = -1;
				boolean hasAccount = false;

				for (int i = 0; i < data.size(); i++) {
					if (data.get(i).getAccountNumber().equals(accountNumber)) {
						hasAccount = true;
						selectedIndex = i;
					}
				}

				if (hasAccount) {
					System.out.print("비밀번호> ");
					String password = sc.nextLine();

					if (data.get(selectedIndex).getPassword().equals(password)) {
						System.out.print("입금 금액> ");
						long amount = sc.nextLong();
						long timeNow = new Date().getTime();
						data.get(selectedIndex).setRecords(1, amount, timeNow);
						data.get(selectedIndex).setBalance(1, amount);
					} else {
						System.out.println("비밀번호가 맞지 않습니다.");
					}
				} else {
					System.out.println("계좌가 존재하지 않습니다.");
				}
			} else if (userInput.equals("4")) {
				System.out.print("계좌번호> ");
				String accountNumber = sc.nextLine();
				int selectedIndex = -1;
				boolean hasAccount = false;

				for (int i = 0; i < data.size(); i++) {
					if (data.get(i).getAccountNumber().equals(accountNumber)) {
						hasAccount = true;
						selectedIndex = i;
					}
				}

				if (hasAccount) {
					System.out.print("비밀번호> ");
					String password = sc.nextLine();

					if (data.get(selectedIndex).getPassword().equals(password)) {
						System.out.print("출금 금액> ");
						long amount = sc.nextLong();
						long timeNow = new Date().getTime();
						data.get(selectedIndex).setRecords(2, amount, timeNow);
						boolean isSucceed = data.get(selectedIndex).setBalance(2, amount);
						if (!isSucceed) {
							System.out.println("잔액이 부족합니다.");
						}
					} else {
						System.out.println("비밀번호가 맞지 않습니다.");
					}
				} else {
					System.out.println("계좌가 존재하지 않습니다.");
				}
			} else {
				System.out.println("올바른 숫자를 입력해주세요.");
			}
		}
	}

}
