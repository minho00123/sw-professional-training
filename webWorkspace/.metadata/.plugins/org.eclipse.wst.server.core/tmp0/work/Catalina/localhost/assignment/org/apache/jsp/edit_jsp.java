/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.100
 * Generated at: 2025-05-03 05:29:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class edit_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>✏️ 게시글 수정</title>\r\n");
      out.write("<link\r\n");
      out.write("	href=\"https://fonts.googleapis.com/css2?family=Noto+Sans+KR&display=swap\"\r\n");
      out.write("	rel=\"stylesheet\">\r\n");
      out.write("<style>\r\n");
      out.write("body {\r\n");
      out.write("	font-family: 'Noto Sans KR', sans-serif;\r\n");
      out.write("	background-color: #f7f9fc;\r\n");
      out.write("	margin: 0;\r\n");
      out.write("	padding: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".container {\r\n");
      out.write("	width: 80%;\r\n");
      out.write("	max-width: 900px;\r\n");
      out.write("	margin: 40px auto;\r\n");
      out.write("	background-color: #fff;\r\n");
      out.write("	box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n");
      out.write("	border-radius: 10px;\r\n");
      out.write("	padding: 30px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("h2 {\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	margin-bottom: 30px;\r\n");
      out.write("	color: #333;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("form {\r\n");
      out.write("	display: flex;\r\n");
      out.write("	flex-direction: column;\r\n");
      out.write("	gap: 15px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("label {\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input[type=\"text\"], textarea {\r\n");
      out.write("	padding: 10px;\r\n");
      out.write("	font-size: 15px;\r\n");
      out.write("	border: 1px solid #ccc;\r\n");
      out.write("	border-radius: 5px;\r\n");
      out.write("	width: 100%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("textarea {\r\n");
      out.write("	resize: vertical;\r\n");
      out.write("	min-height: 200px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input[readonly] {\r\n");
      out.write("	background-color: #eee;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".buttons {\r\n");
      out.write("	display: flex;\r\n");
      out.write("	justify-content: flex-end;\r\n");
      out.write("	gap: 10px;\r\n");
      out.write("	margin-top: 20px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".buttons input, .buttons a {\r\n");
      out.write("	padding: 10px 18px;\r\n");
      out.write("	border: none;\r\n");
      out.write("	border-radius: 6px;\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("	text-decoration: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".submit-btn {\r\n");
      out.write("	background-color: #4a90e2;\r\n");
      out.write("	color: white;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".submit-btn:hover {\r\n");
      out.write("	background-color: #3b7dc4;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".cancel-btn {\r\n");
      out.write("	background-color: #ccc;\r\n");
      out.write("	color: #333;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".cancel-btn:hover {\r\n");
      out.write("	background-color: #bbb;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"container\">\r\n");
      out.write("		<h2>✏️ 게시글 수정</h2>\r\n");
      out.write("\r\n");
      out.write("		<form action=\"edit.do\" method=\"post\">\r\n");
      out.write("			<!-- 게시글 번호(hidden) -->\r\n");
      out.write("			<input type=\"hidden\" name=\"num\" value=\"");
      out.print("넘버");
      out.write("\">\r\n");
      out.write("\r\n");
      out.write("			<div>\r\n");
      out.write("				<label for=\"writer\">작성자</label> <input type=\"text\" id=\"writer\"\r\n");
      out.write("					name=\"id\" value=\"");
      out.print("아이디");
      out.write("\" readonly>\r\n");
      out.write("			</div>\r\n");
      out.write("\r\n");
      out.write("			<div>\r\n");
      out.write("				<label for=\"subject\">제목</label> <input type=\"text\" id=\"subject\"\r\n");
      out.write("					name=\"sub\" value=\"");
      out.print("제목");
      out.write("\" required>\r\n");
      out.write("			</div>\r\n");
      out.write("\r\n");
      out.write("			<div>\r\n");
      out.write("				<label for=\"content\">내용</label>\r\n");
      out.write("				<textarea id=\"content\" name=\"content\" required>");
      out.print("내용");
      out.write("</textarea>\r\n");
      out.write("			</div>\r\n");
      out.write("\r\n");
      out.write("			<div class=\"buttons\">\r\n");
      out.write("				<input type=\"submit\" class=\"submit-btn\" value=\"수정 완료\"> <a\r\n");
      out.write("					href=\"boardList.jsp\" class=\"cancel-btn\">취소</a>\r\n");
      out.write("			</div>\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
