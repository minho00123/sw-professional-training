/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.100
 * Generated at: 2025-04-17 07:49:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.bbs;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.my.DbInfo;
import java.sql.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(1);
    _jspx_imports_classes.add("com.my.DbInfo");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<a href=\"../\">[HOME]</a>\r\n");
      out.write("	<a href=\"../intro/\">[INTRO]</a>\r\n");
      out.write("	<a href=\"../bbs/\">[BBS]</a>\r\n");
      out.write("	<a href=\"../login/\">[LOGIN]</a>\r\n");
      out.write("	<hr>\r\n");
      out.write("	<h1>list page</h1>\r\n");
      out.write("	\r\n");
      out.write("	<form action=\"./\">\r\n");
      out.write("		<select name = \"limit\">\r\n");
      out.write("			<option value=\"5\">5씩</option>\r\n");
      out.write("			<option value=\"10\">10씩</option>\r\n");
      out.write("			<option value=\"25\">25씩</option>\r\n");
      out.write("			<option value=\"50\">50씩</option>\r\n");
      out.write("		</select>\r\n");
      out.write("		<input type=\"submit\" value=\"보기\">\r\n");
      out.write("	</form>\r\n");
      out.write("	<table width=\"800\" border=\"1\" cellspacing=\"0\">\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th width=\"50\">no</th>\r\n");
      out.write("			<th>subject</th>\r\n");
      out.write("			<th width=\"100\">nalja</th>\r\n");
      out.write("			<th width=\"50\">count</th>\r\n");
      out.write("		</tr>\r\n");
      out.write("	");

		int limit = 10;
		try {
		limit = Integer.parseInt(request.getParameter("limit"));
		} catch (Exception e) {}
		String p = request.getParameter("p");
		if (p == null) p = "1";
		String sql="select * from " +
			    "(select rownum as rn, num, sub, nalja, cnt from " +
			            "(select num, sub, nalja, cnt from bbs05 order by num desc)) " +
			     "where rn between 10*(" + Integer.parseInt(p) +"-1)+1 and 10*(" + Integer.parseInt(p) + "-1)+1 + (10-1)";
		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;
		int loop = 0;
		
		try {
			Class.forName(DbInfo.driver);
			conn = DriverManager.getConnection(DbInfo.url, DbInfo.user, DbInfo.password);
			stmt = conn.createStatement();
			rs = stmt.executeQuery("select trunc((count(num) - 1) / 10) + 1 from bbs05");
			if (rs.next()) loop = rs.getInt(1);
			if (rs != null) rs.close();
			if (stmt != null) stmt.close();
			stmt = conn.createStatement();
			rs = stmt.executeQuery(sql);
			while (rs.next()) {
	
      out.write("\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td>");
      out.print(rs.getInt("num") );
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print(rs.getString("sub") );
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print(rs.getDate("nalja") );
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print(rs.getInt("cnt") );
      out.write("</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("	");

			}
		} finally {
			if (rs != null) rs.close();
			if (stmt != null) stmt.close();
			if (conn != null) conn.close();
		}
	
      out.write("\r\n");
      out.write("	</table>\r\n");
      out.write("	<p>\r\n");
      out.write("	");
	
		int barCount = 10;
		int begin = barCount * ((Integer.parseInt(p) - 1) / barCount) + 1;
		int end = begin + (barCount - 1);
		if (end > loop ) end = loop;
		
		if ((Integer.parseInt(p) - 1) / barCount == 0) {
	
      out.write("\r\n");
      out.write("		<a>[이전]</a>\r\n");
      out.write("	");
 
		} else {
	
      out.write("\r\n");
      out.write("	<a href=\"./?p=");
      out.print(begin - 1 );
      out.write("&limit=");
      out.print(limit );
      out.write("\">[이전]</a>\r\n");
      out.write("	");
 
		}

		for (int i = begin; i <= end; i++) {
	
      out.write("\r\n");
      out.write("		<a href=\"./?p=");
      out.print(i );
      out.write("&limit=");
      out.print(limit );
      out.write('"');
      out.write('>');
      out.write('[');
      out.print(i );
      out.write("]</a>\r\n");
      out.write("	");

		}
		
		if (end < loop) {
	
      out.write("\r\n");
      out.write("		<a href=\"./?p=");
      out.print(end + 1);
      out.write("&limit=");
      out.print(limit );
      out.write("\">[이후]</a>\r\n");
      out.write("	");
 
		} else {
	
      out.write("\r\n");
      out.write("		<a>[이후]</a>\r\n");
      out.write("	");

		}
	
      out.write("\r\n");
      out.write("	</p>\r\n");
      out.write("	<a href=\"add.jsp\">[입 력]</a>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
