package com.mvc.model;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import com.mvc.util.Mysql;

public class BoardDao {
	Connection conn;
	Statement stmt;
	ResultSet rs;

	// 댓글 추가 메소드
	public void addComment(int boardId, String userId, String content, Integer parentId) {
		String sql = "INSERT INTO board (board_id, userId, content, parent_id) VALUES (" + boardId + ", '" + userId
				+ "', '" + content + "', " + (parentId != null ? parentId : "0") + ")";

		try {
			conn = Mysql.getConnection();
			stmt = conn.createStatement();
			stmt.executeUpdate(sql);
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if (stmt != null)
					stmt.close();
				if (conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}

	// 게시글의 모든 댓글과 대댓글을 가져오기
	public List<BoardDto> getComments(int boardId) {
		List<BoardDto> comments = new ArrayList<>();
		String sql = "SELECT * FROM board WHERE parent_id = 0 AND board_id = " + boardId + " ORDER BY id ASC";

		try {
			conn = Mysql.getConnection();
			stmt = conn.createStatement();
			rs = stmt.executeQuery(sql);

			while (rs.next()) {
				int commentId = rs.getInt("id");
				String userId = rs.getString("userId");
				String content = rs.getString("content");
				Date createdAt = rs.getDate("created_at");
				int parentId = rs.getInt("parent_id");

				// 부모 댓글을 가져온 후 해당 댓글의 대댓글들을 가져옴
				List<BoardDto> replies = getReplies(commentId);

				// 부모 댓글과 그에 대한 대댓글들을 하나의 리스트로 구성
				comments.add(new BoardDto(commentId, userId, content, createdAt, parentId, replies));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null)
					rs.close();
				if (stmt != null)
					stmt.close();
				if (conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

		return comments;
	}

	// 특정 댓글에 대한 대댓글을 가져오기
	private List<BoardDto> getReplies(int parentId) {
		List<BoardDto> replies = new ArrayList<>();
		String sql = "SELECT * FROM board WHERE parent_id = " + parentId + " ORDER BY id ASC";

		try {
			conn = Mysql.getConnection();
			stmt = conn.createStatement();
			rs = stmt.executeQuery(sql);

			while (rs.next()) {
				int id = rs.getInt("id");
				String userId = rs.getString("userId");
				String content = rs.getString("content");
				Date createdAt = rs.getDate("created_at");
				int parent_id = rs.getInt("parent_id");

				replies.add(new BoardDto(id, userId, content, createdAt, parent_id, null));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null)
					rs.close();
				if (stmt != null)
					stmt.close();
				if (conn != null)
					conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

		return replies;
	}

	// 게시글 리스트 가져오기
	public List<BoardDto> getList(int page, String keyword) {
		List<BoardDto> list = new ArrayList<>();
		int limit = 10;
		String sql = "SELECT * FROM board WHERE title LIKE '%" + keyword + "%' OR content LIKE '%" + keyword + "%' "
				+ "ORDER BY id DESC LIMIT " + ((page - 1) * limit) + ", " + limit;

		try {
			conn = Mysql.getConnection();
			stmt = conn.createStatement();
			rs = stmt.executeQuery(sql);
			while (rs.next()) {
				list.add(new BoardDto(rs.getInt("id"), rs.getString("userId"), rs.getString("title"),
						rs.getString("content"), rs.getDate("created_at"), rs.getDate("updated_at"), 0));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (stmt != null) {
					stmt.close();
				}
				if (conn != null) {
					conn.close();
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}

		return list;
	}
}
